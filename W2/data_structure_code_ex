# Câu hỏi tự luận
# Excercise 1: This function create a sliding window with size of k and get a max value in each iteration then store in the new list
def sliding_window_max(num_list, k):
    max_result = []

    for i in range(len(num_list) - k + 1):
        window = num_list[i:i+k]
        max_in_win = max(window)
        max_result.append(max_in_win)

    return max_result


num_list = [3, 4, 5, 1, -44, 5, 10, 12, 33, 1]
k = 3
sliding_window_max(num_list, k)

# Excercise 2: This function take in the input word and count the frequency of character in a word
s = input('Input a word ')


def count_char(s):
    letter_stat = {}
    for char in s:
        if not char.isalpha():
            print(f'Input must be alphabet letter')
            break
        else:
            char = char.lower()
            if char in letter_stat:
                letter_stat[char] += 1
            else:
                letter_stat[char] = 1
    return letter_stat


result = count_char(s)
print(result)

# Excersice 3: This function count the frequency of word in the input document


def count_word(file_path):
    with open(file_path, 'r') as f:
        document = f.read()

    words = document.split()

    counter = {}
    for word in words:
        if word in counter:
            counter[word] += 1
        else:
            counter[word] = 1
    return counter


file_path = 'W2\P1_data.txt'
result = count_word(file_path)
print(result)

# Excercise 4 : This function calculate the levenshtein distance (the minimum edit distance path)


def levenshtein_distance(source, target):
    # Intialize the matrix with size (len(token1)+1) x (len(token2)+1)
    distances = [[0]*(len(target)+1) for i in range(len(source)+1)]

    # Fill the first row and first column with incremental costs
    for t1 in range(len(source) + 1):
        distances[t1][0] = t1

    for t2 in range(len(target) + 1):
        distances[0][t2] = t2

    del_cost = 0
    ins_cost = 0
    sub_cost = 0

    for t1 in range(1, len(source) + 1):
        for t2 in range(1, len(target) + 1):
            if (source[t1-1] == target[t2-1]):
                distances[t1][t2] = distances[t1 - 1][t2 - 1]
            else:
                del_cost = distances[t1][t2 - 1]  # Cost of Deletion
                ins_cost = distances[t1 - 1][t2]  # Cost of Insertion
                sub_cost = distances[t1-1][t2-1]  # Cost of Subsitution

                if (del_cost <= ins_cost and del_cost <= sub_cost):
                    distances[t1][t2] = del_cost + 1
                elif (ins_cost <= del_cost and ins_cost <= sub_cost):
                    distances[t1][t2] = ins_cost + 1
                else:
                    distances[t1][t2] = sub_cost + 1

    return distances[len(source)][len(target)]


# Testing the function
print(levenshtein_distance("kitten", "sitting"))
print(levenshtein_distance("yu", "you"))
